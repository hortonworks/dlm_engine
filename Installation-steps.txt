# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Building & Packaging Falcon

Installing Falcon
*Pre-requisites:
   * hadoop-0.20.2 +
   * oozie-3.1.5 + (Patched version can be downloaded from: https://github.com/InMobi/oozie/tree/branch-3.2)

*Falcon Server

   * Download the source from https://github.com/sriksun/Falcon
   * Navigate to base project folder,named 'Falcon'
   * Build as "mvn clean package" at the base location. Please note that both maven 2/3 are supported.
   * By default only embedded/standalone mode is build.
   * To build Falcon with documentation build with MVN profile "all".
   * To build the Falcon for distributed mode, i.e. multiple server and prism mode, build with MVN profile "distributed".
   * Once the build operation is over,navigate to '<base-folder>/Falcon/webapps/target' and deploy the .war file generated
      there in a web container (Eg: tomcat6).


*Falcon Client

   * Follow the steps 1 to 3 from server instructions.
   * Once the build operation is over, navigate to '<base-folder>/Falcon/client/target'. There is a client.jar that has
      been generated along with multiple other jars. Fetch this jar and others to use the Falcon client application.
      Please ensure that the other jars in the folder are always specified in the classpath of the client.jar.
   * Please refer Falcon-CLI guide for various options on how to use the falcon client.


*Setting up Falcon server properties:

Inside your web container, where the falcon war has exploded, you should be able to find 2 files, startup.properties and runtime.properties.
The path would be:
<container-base>/<war-location>/falcon-webapp-0.2-SNAPSHOT/WEB-INF/classes

*startup.properties:* Specifies values/paths used by Falcon on startup. Common entries usually include config store location
,broker url (for messaging), and other settings.Any changes to this requires Falcon to be restarted to take effect.

*runtime.properties:* Specifies various properties that can be picked at runtime. Falcon server keeps polling this file after a certain interval;
and incorporates changes, if any.

*Domain based settings (only applicable for Falcon 0.2):*

Falcon 0.2 and subsequent releases support domain based properties. The user can specify properties either for all domains
(with prefixing the property with a '*' ) or for a particular domain (with prefixing the domain name to the property).
Once the domain is set,  the user can set an env variable,FALCON_DOMAIN as the domain that the Falcon is supposed to use.

Example:
Trying to set the config store property for all domains:
*.config.store.uri=file:///var/lib/tomcat6/target/store
Trying to set config store property for a 'specific' domain:
qa.config.store.uri=file:///var/lib/tomcat6/target/store

To ensure that Falcon installation on your system uses the qa domain settings, just set the FALCON_DOMAIN value to 'qa' in your environment.

*Falcon logs
Once deployed, all the Falcon operations are logged in folder /var/log/falcon by default.
Application.log contains logs for all the falcon server operations, if Falcon is deployed in distributed mode then prism logs are populated in
Prism.log
