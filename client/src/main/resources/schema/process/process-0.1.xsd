<?xml version="1.0" encoding="UTF-8"?>

<!-- ~ Licensed to the Apache Software Foundation (ASF) under one ~ or more contributor license agreements. See the NOTICE file ~ distributed with this work for additional information 
    ~ regarding copyright ownership. The ASF licenses this file ~ to you under the Apache License, Version 2.0 (the ~ "License"); you may not use this file except in compliance ~ with the 
    License. You may obtain a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 ~ ~ Unless required by applicable law or agreed to in writing, software ~ distributed 
    under the License is distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ~ See the License for the specific language governing 
    permissions and ~ limitations under the License. -->
    
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="process">
        <xs:annotation>
            <xs:documentation>
                Licensed to the Apache Software Foundation (ASF) under one
                or more contributor license agreements. See the NOTICE file
                distributed with this work for
                additional information
                regarding copyright ownership. The ASF licenses this file
                to you under the Apache License, Version 2.0 (the
                "License"); you may not use this
                file except in compliance
                with the License. You may obtain a copy of the License at

                http://www.apache.org/licenses/LICENSE-2.0

                Unless required by applicable law or
                agreed to in writing, software
                distributed under the License is distributed on an "AS IS" BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
                implied.
                See the License for the specific language governing permissions and
                limitations under the License.

                A process defines configuration for the workflow job like
                frequency of the workflow, inputs and outputs for the workflow, how to
                handle workflow failures, how to handle data that comes late and so on.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="cluster">
                    <xs:annotation>
                        <xs:documentation>Defines the cluster where the workflow should run
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute type="IDENTIFIER" name="name" use="required" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="concurrency">
                    <xs:annotation>
                        <xs:documentation>Defines how many workflow instances can run concurrently
                        </xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:integer">
                            <xs:minInclusive value="1" />
                            <xs:maxInclusive value="12" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>

                <xs:element name="execution">
                    <xs:annotation>
                        <xs:documentation>Defines the order in which ready workflow instances should run
                        </xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="FIFO" />
                            <xs:enumeration value="LIFO" />
                            <xs:enumeration value="ONLYLAST" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>

                <xs:element type="frequency-type" name="frequency">
                    <xs:annotation>
                        <xs:documentation>Defines workflow frequency
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="periodicity">
                    <xs:simpleType>
                        <xs:restriction base="xs:integer">
                            <xs:minInclusive value="1" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>

                <xs:element name="validity">
                    <xs:annotation>
                        <xs:documentation>Defines how long the workflow should run
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute type="date-time-type" name="start" use="required" />
                        <xs:attribute type="date-time-type" name="end" use="required" />
                        <xs:attribute name="timezone" use="required">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="UTC" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>

                <xs:element name="inputs" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Defines inputs for the workflow. The workflow will run only when the scheduled time is up and all the inputs are available
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="input" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation>Defines input for the workflow. Each input maps to a feed. Input path and frequency are picked from feed definition.
                                        The input specifies the start and end instance for the workflow. Ivory creates a property with input name which contains paths of all input
                                        instances between start and end. This property will be available for the workflow to read inputs.
                                        Input can also optionally specify the specific partition of feed that the workflow needs.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute type="IDENTIFIER" name="name" use="required" />
                                    <xs:attribute type="IDENTIFIER" name="feed" use="required" />
                                    <xs:attribute type="xs:string" name="start-instance" use="required" />
                                    <xs:attribute type="xs:string" name="end-instance" use="required" />
                                    <xs:attribute type="xs:string" name="partition" use="optional" />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="outputs" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Defines outputs of the workflow
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="output" maxOccurs="unbounded" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation> Each output maps to a feed. The Output path and frequency are picked from the corresponding feed definition.
                                        The output also specifies the instance that is created in terms of EL expression.
                                        For each output, Ivory creates a property with the output name which can be used in workflows
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute type="IDENTIFIER" name="name" use="required" />
                                    <xs:attribute type="IDENTIFIER" name="feed" use="required" />
                                    <xs:attribute type="xs:string" name="instance" use="required" />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="properties" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>The key-value pairs that are passed to the workflow as properties.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="property" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                    <xs:attribute type="xs:string" name="name" use="required" />
                                    <xs:attribute type="xs:string" name="value" use="required" />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="workflow">
                    <xs:annotation>
                        <xs:documentation>Defines the workflow that should run. The workflow should be defined with respect to the workflow specification of the workflow engine.
                            Only oozie workflow engine is supported as of now. The workflow path is the path on hdfs which contains the workflow xml
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="engine" use="optional">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="oozie" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute type="xs:string" name="path" use="required" />
                    </xs:complexType>
                </xs:element>

                <xs:element name="retry" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Retry defines how to handle workflow failures. Policy type - backoff, exponention backoff along with the delay define how frequenctly
                            the workflow should be re-tried. Number of attempts define how many times to re-try the failures.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute type="policy-type" name="policy" use="required" />
                        <xs:attribute type="xs:positiveInteger" name="delay" use="required" />
                        <xs:attribute type="frequency-type" name="delayUnit" use="required" />
                        <xs:attribute type="xs:positiveInteger" name="attempts" use="required" />
                    </xs:complexType>
                </xs:element>

                <xs:element name="late-process" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>Late process defines how the late data should be handled. Late policy - backoff, exponential backoff, final along with delay
                            define how frequently Ivory should check for late data. The late data handling can be customized for each input separatly.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="late-input" maxOccurs="unbounded" minOccurs="1">
                                <xs:annotation>
                                    <xs:documentation>
                                        For each input, defines the workflow that should be run when late data is detected
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute type="IDENTIFIER" name="feed" use="required" />
                                    <xs:attribute type="xs:string" name="workflow-path" use="required" />
                                </xs:complexType>

                            </xs:element>
                        </xs:sequence>
                        <xs:attribute type="policy-type" name="policy" use="required" />
                        <xs:attribute type="xs:integer" name="delay" use="optional" />
                        <xs:attribute type="frequency-type" name="delayUnit" use="optional" />
                    </xs:complexType>

                </xs:element>
            </xs:sequence>
            <xs:attribute type="IDENTIFIER" name="name" use="required" />
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="IDENTIFIER">
        <xs:restriction base="xs:string">
            <xs:pattern value="([a-zA-Z]([\-_a-zA-Z0-9])*){1,39})" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="policy-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="backoff" />
            <xs:enumeration value="exp-backoff" />
            <xs:enumeration value="final" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="date-time-type">
        <xs:restriction base="xs:string">
            <xs:pattern value="((1|2)\d\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])T([0-1][0-9]|2[0-3]):([0-5][0-9]))Z" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="frequency-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="minutes" />
            <xs:enumeration value="hours" />
            <xs:enumeration value="days" />
            <xs:enumeration value="months" />
        </xs:restriction>
    </xs:simpleType>
</xs:schema>