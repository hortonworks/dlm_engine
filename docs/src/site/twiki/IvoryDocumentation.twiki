---++ Contents
   * <a href="#Architecture">Architecture</a>
   * <a href="#Control_flow">Control flow</a>
   * <a href="#Entity_Specification">Entity Specification</a>
   * <a href="#Entity_Management_actions">Entity Management actions</a>
   * <a href="#Instance_Management_actions">Instance Management actions</a>
   * <a href="#Retention">Retention</a>
   * <a href="#Cross_entity_validations">Cross entity validations</a>
   * <a href="#Updating_process_and_feed_definition">Updating process and feed definition</a>
   * <a href="#Handling_late_input_data">Handling late input data</a>
   * <a href="#Alerting_and_Monitoring">Alerting and Monitoring</a>
   * <a href="#Ivory_EL_Expressions">Ivory EL Expressions</a>

---++ Architecture
---+++ Introduction
Ivory is a feed and process management platform over hadoop. Ivory essentially transforms user's feed
and process configurations into repeated actions through a standard workflow engine. Ivory by itself
doesn't do any heavy lifting. All the functions and workflow state management requirements are delegated
to the workflow scheduler. The only thing that Ivory maintains is the dependencies and relationship between
these entities. This is adequate to provide integrated and seamless experience to the developers using
the ivory platform.

---+++ Ivory Architecture - Overview
<img src="Architecture.png" height="400" width="600" />

---+++ Scheduler
Ivory system has picked Oozie as the default scheduler. However the system is open for integration with
other schedulers. Lot of the data processing in hadoop requires scheduling to be based on both data availability
as well as time. Oozie currently supports these capabilities off the shelf and hence the choice.

---+++ Control flow
Though the actual responsibility of the workflow is with the scheduler (Oozie), Ivory remains in the
execution path, by subscribing to messages that each of the workflow may generate. When Ivory generates a
workflow in Oozie, it does so, after instrumenting the workflow with additional steps which includes messaging
via JMS. Ivory system itself subscribes to these control messages and can perform actions such as retries,
handling late input arrival etc.

---++++ Feed Schedule flow
<img src="FeedSchedule.png" height="400" width="600" />

---++++ Process Schedule flow
<img src="ProcessSchedule.png" height="400" width="600" />

---+++ Configuration Store
Configuration store is file system based store that the Ivory system maintains where the entity definitions
are stored. File System used for the configuration store can either be a local file system or a hdfs file system.
It is recommended that to maintain this store outside of the system where Ivory is deployed. This is needed
for handling issues relating to disk failures or other permanent failures of the system where Ivory is deployed.
Configuration store also maintains an archive location where prior versions of the configuration or deleted
configurations are maintained. They are never accessed by the Ivory system and they merely serve to track
historical changes to the entity definitions.

---+++ Atomic Actions
Often times when Ivory performs entity management actions, it may need to do several individual actions.
If one of the action were to fail, then the system could be in an inconsistent state. To avoid this, all
individual operations performed are recorded into a transaction journal. This journal is then used to undo
the overall user action. In some cases, it is not possible to undo the action. In such cases, Ivory attempts
to keep the system in an consistent state.

---++ Entity Specification
---++ Entity Management actions

---+++ Submit:
Entity submit action allows a new cluster/feed/process to be setup within Ivory. Submitted entity is not
scheduled, meaning it would simply be in the configuration store within Ivory. Besides validating against
the schema for the corresponding entity being added, the Ivory system would also perform inter-field
validations within the configuration file and validations across dependent entities.

---+++ List:
List all the entities within the ivory config store for the entity type being requested. This will include
both scheduled and submitted entity configurations.

---+++ Dependency:
Returns the dependencies of the requested entity. Dependency list include both forward and backward
dependencies (depends on & is dependent on). For ex, a feed would show process that are dependent on the
feed and the clusters that it depends on.'

---+++ Schedule:
Feeds or Processes that are already submitted and present in the config store can be scheduled. Upon schedule,
Ivory system wraps the required repeatable action as a bundle of oozie coordinators and executes them on the
Oozie scheduler. (It is possible to extend Ivory to use an alternate workflow engine other than Oozie).
Ivory overrides the workflow instance's external id in Oozie to reflect the process/feed and the nominal
time. This external Id can then be used for instance management functions.

---+++ Suspend:
This action is applicable only on scheduled entity. This triggers suspend on the oozie bundle that was
scheduled earlier through the schedule function. No further instances are executed on a suspended process/feed.

---+++ Resume:
Puts a suspended process/feed back to active, which in turn resumes applicable oozie bundle.

---+++ Status:
Gets the current status of the entity.

---+++ Definition:
Gets the current entity definition as stored in the configuration store. Please note that user documentations
in the entity will not be retained.

---+++ Delete:
Delete operation on the entity removes any scheduled activity on the workflow engine, besides removing the
entity from the ivory configuration store. Delete operation on an entity would only succeed if there are
no dependent entities on the deleted entity.

---+++ Update:
Update operation allows an already submitted/scheduled entity to be updated. Cluster update is currently
not allowed. Feed update can cause cascading update to all the processes already scheduled. The following
set of actions are performed in Oozie to realize an update.

   * Suspend the previously scheduled Oozie coordinator. This is prevent any new action from being triggered.
   * Update the coordinator to set the end time to "now"
   * Resume the suspended coordiantors
   * Schedule as per the new process/feed definition with the start time as "now"

---++ Instance Management actions
---++ Retention
In coherence with it's feed lifecycle management philosophy, Ivory allows the user to retain  data in the system
for a specific period of time for a scheduled feed. The user can specify the retention period in the respective 
feed/data xml in the following manner for each cluster the feed can belong to :
<verbatim>
<clusters>
        <cluster name="corp" type="source">
            <validity start="2012-01-30T00:00Z" end="2013-03-31T23:59Z"
                      timezone="UTC" />
            <retention limit="hours(10)" action="delete" /> 
        </cluster>
 </clusters> 
</verbatim>

The 'limit' attribute can be specified in units of minutes/hours/days/months, and a corresponding numeric value can
be attached to it. It essentially instructs the system to retain data spanning from the current moment to the time specified
in the attribute spanning backwards in time. Any data beyond the limit (past/future) is erased from the system.

---+++ Example:
 If retention period is 10 hours, and the policy kicks in at time 't', the data retained by system is essentially the
one falling in between [t-10h,t]. Any data in the boundaries [-°,t-10h) and (t,°] is removed from the system.

The 'action' attribute can attain values of DELETE/ARCHIVE. Based upon the tag value, the data eligible for removal is either
deleted/archived.

---+++ NOTE: Ivory 0.1/0.2 releases support Delete operation only

---+++ When does retention policy come into play, aka when is retention really performed?

Retention policy in Ivory kicks off on the basis of the time value specified by the user. Here are the basic rules:

   * If the retention policy specified is less than 24 hours: In this event, the retention policy automatically kicks off every 6 hours.
   * If the retention policy specified is less than 24 hours: In this event, the retention policy automatically kicks off every 6 hours.
   * If the retention policy specified is less than 24 hours: In this event, the retention policy automatically kicks off every 6 hours.

Relation between feed path and retention policy: Retention policy for a particular scheduled feed applies only to the eligible feed path
specified in the feed xml. Any other paths that do not conform to the specified feed path are left unaffected by the retention policy.

---+++ Where is the feed path defined?

It's defined in the feed xml within the location tag.

*Example:*
<verbatim>
<locations>
        <location type="data" path="/retention/testFolders/${YEAR}-${MONTH}-${DAY}" />
</locations>
</verbatim>

Now, if the above path contains folders in the following fashion:

/retention/testFolders/${YEAR}-${MONTH}-${DAY}
/retention/testFolders/${YEAR}-${MONTH}/someFolder

The feed retention policy would only act on the former and not the latter.


---+++ Relation between feed's retention limit and feed's late arrival cut off period:

For reasons that are obvious, Ivory has an external validation that ensures that the user
always specifies the feed retention limit to be more than the feed's allowed late arrival period.
If this rule is violated by the user, the feed submission call itself throws back an error.
   

---++ Cross entity validations


---+++ Entity Dependencies in a nutshell
<img src="EntityDependency.png" height="50" width="300" />


The above schematic shows the dependencies between entities in Ivory. The arrow in above diagram
points from a dependency to the dependent. 


Let's just get one simple rule stated here, which we will keep referring to time and again while
talking about entities: A dependency in the system cannot be removed unless all it's dependents are
removed first. This holds true for all transitive dependencies also.

Now, let's follow it up with a simple illustration of an Ivory Job:

Let's consider a process P that refers to feed F1 as an input feed, and generates feed F2 as an
output feed. These feeds/processes are supposed to be associated with a cluster C1.

The order of submission of this job would be in the following order:

C1->F1/F2(in any order)->P

The order of removal of this job from the system is in the exact opposite order, i.e.:

P->F1/F2(in any order)->C1

Please note that there might be multiple process referring to a particular feed, or a single feed belonging
to multiple clusters. In that event, any of the dependencies cannot be removed unless ALL of their dependents
are removed first. Attempting to do so will result in an error message and a 400 Bad Request operation.


---+++ Other cross validations between entities in Ivory system

*Cluster-Feed Cross validations:*

   * The cluster(s) referenced by feed (inside the <clusters> tag) should be  present in the system at the time
of submission. Any exception to this results in a feed submission failure. Note that a feed might be referring
to more than a single cluster. The identifier for the same is the 'name' attribute for the individual cluster.

*Example:*

*Feed XML:*
   
<verbatim>
   <clusters>
        <cluster name="corp" type="source">
            <validity start="2009-01-01T00:00Z" end="2012-12-31T23:59Z"
                      timezone="UTC" />
            <retention limit="months(6)" action="delete" />
        </cluster>
    </clusters>
</verbatim>

*Cluster corp's XML:*

<verbatim>
<cluster colo="gs" description="" name="corp" xmlns="uri:ivory:cluster:0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
</verbatim>

*Cluster-Process Cross validations:*


   * In a similar relationship to that of feed and a cluster, a process also refers to the relevant cluster by the
'name' attribute. Any exception results in a process submission failure.


---+++ Example:
---+++ Process XML:
<verbatim>
<process name="agregator-coord16">
    <cluster name="corp"/>....
</verbatim>
---+++ Cluster corp's XML:
<verbatim>
<cluster colo="gs" description="" name="corp" xmlns="uri:ivory:cluster:0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
</verbatim>

*Feed-Process Cross Validations:*


1. The process <input> and feeds designated as input feeds for the job:

 For every feed referenced in the <input> tag in a process definition, following rules are applied
when the process is due for submission:

   * The feed having a value associated with the 'feed' attribute in input tag should be present in
the system. The corresponding attribute in the feed definition is the 'name' attribute in the <feed> tag.

*Example:*

*Process xml:*

<verbatim>
<input end-instance="now(0,20)" start-instance="now(0,-60)"
feed="raaw-logs16" name="inputData"/>
</verbatim>

*Feed xml:*
<verbatim>
<feed description="clicks log" name="raaw-logs16"....
</verbatim>

   
    * The time interpretation for corresponding tags indicating the start and end instances for a
particular input feed in the process xml should lie well within the timespan of  the period specified in
<validity> tag of the particular feed.

*Example:*

1. In the following scenario, process submission will result in an error:

*Process XML:*
<verbatim>
<input end-instance="now(0,20)" start-instance="now(0,-60)"
   feed="raaw-logs16" name="inputData"/>
</verbatim>
*Feed XML:*
<verbatim>
<validity start="2009-01-01T00:00Z" end="2009-12-31T23:59Z".....
</verbatim>
Explanation: The process timelines for the feed range between a 40 minute interval between [-60m,-20m] from
the current timestamp (which lets assume is  'today' as per the 'now' directive). However, the feed validity
is between a 1 year period in 2009, which makes it anachronistic. 

2. The following example would work just fine:

*Process XML:*
<verbatim>
<input end-instance="now(0,20)" start-instance="now(0,-60)"
   feed="raaw-logs16" name="inputData"/>
</verbatim>
*Feed XML:*
<verbatim>
validity start="2009-01-01T00:00Z" end="2012-12-31T23:59Z" .......
</verbatim>
since at the time of charting this document (03/03/2012), the feed validity is able to encapsulate the process
input's start  and end instances.


Failure to follow any of the above rules would result in a process submission failure.

*NOTE:* Even though the above check ensures that the timelines are not anachronistic, if the input data is not
present in the system for the specified time period, the process can be submitted and scheduled, but all instances
created would result in a WAITING state unless data is actually provided in the cluster.



---++ Updating process and feed definition
---++ Handling late input data
Ivory system can handle late arrival of input data and appropriately re-trigger processing for the affected
instance. From the perspective of late handling, there are two main configuration parameters late-arrival cut-off
and late-inputs section in feed and process entity definition that are central. These configurations govern
how and when the late processing happens. In the current implementation (oozie based) the late handling is very
simple and basic. The ivory system looks at all dependent input feeds for a process and computes the max late
cut-off period. Then for every coordinator scheduled for the process, it also schedules a late coordinator.
This default or the regular coordinator as part of the user workflow also records the input size that it is
considering for processing. This data is then used by the late coordinator to see if the input has changed
since the normal execution time. If it has, it essentially re-triggers the user's workflow. These actions to
record input size or detecting late input based on this size is added to the workflow that Ivory schedules
for each process. The offset between the late coordinator and the default coordinator is same as the max
late-cut-off of the input feeds. However they run with the same external id as the default one.


---++ Alerting and Monitoring
---+++ Alerting
Ivory provides monitoring of various events by capturing metrics of those events.
The metric numbers can then be used to monitor performance and health of the Ivory system and the entire processing pipelines.

Users can view the logs of these events in the metric.log file, by default this file is created under /var/log/ivory/ directory.
Users may also extend the Ivory monitoring framework to send events to systems like Mondemand/lwes.

The following events are captured by Ivory for logging the metrics:
   1. New cluster definitions posted to Ivory (success & failures)
   1. New feed definition posted to Ivory (success & failures)
   1. New process definition posted to Ivory (success & failures)
   1. Process update events (success & failures)
   1. Feed update events (success & failures)
   1. Cluster update events (success & failures)
   1. Process suspend events (success & failures)
   1. Feed suspend events (success & failures)
   1. Process resume events (success & failures)
   1. Feed resume events (success & failures)
   1. Process remove events (success & failures)
   1. Feed remove events (success & failures)
   1. Cluster remove events (success & failures)
   1. Process instance kill events (success & failures)
   1. Process instance re-run events (success & failures)
   1. Process instance generation events
   1. Process instance failure events
   1. Process instance auto-retry events
   1. Process instance retry exhaust events
   1. Feed instance deletion event
   1. Feed instance deletion failure event (no retries)
   1. Feed instance replication event
   1. Feed instance replication failure event
   1. Feed instance replication auto-retry event
   1. Feed instance replication retry exhaust event
   1. Feed instance late arrival event
   1. Feed instance post cut-off arrival event
   1. Process re-run due to late feed event
   1. Transaction rollback failed event

The metric logged for an event has the following properties:
   1. Action - Name of the event.
   2. Dimensions - A list of name/value pairs of various attributes for a given action.
   3. Status- Status of an action FAILED/SUCCEEDED.
   4. Time-taken - Time taken in nano seconds for a given action.

An example for an event logged for a submit of a new process definition:   

   2012-05-04 12:23:34,026 {Action:submit, Dimensions:{entityType=process}, Status: SUCCEEDED, Time-taken:97087000 ns}

Users may parse the metric.log or capture these events from custom monitoring frameworks and can plot various graphs 
or send alerts according to their requirements.

---+++ Notifications
Ivory creates a JMS topic for every process/feed that is scheduled in Ivory.
The implementation class and the broker url of the JMS engine are read from the dependent cluster's definition.
Users may register consumers on the required topic to check the availability or status of feed instances.
 
For a given process that is scheduled, the name of the topic is same as the process name.
Ivory sends a text message for every feed produced by the instance of a process to the JMS topic.
The JMS TextMessage sent to a topic has the follows pattern with $ separator; processName$feedName$feedInstancePath$workflowId$runId$nominalTime$timeStamp
Ex:aggregator$clicks$/clicks/hour/00/00$workflow-0$0$2012-10-10-10-10$2012-10-10-10-10

For a given feed that is scheduled, the name of the topic is same as the feed name.
Ivory sends a text message for every feed instance that is deleted/archived/replicated depending upon the retention policy set in the feed definition.
The JMS TextMessage sent to a topic has the follows pattern with $ separator; processName$feedName$feedInstancePath$retentionAction$workflowId$runId$nominalTime$timeStamp
Ex:aggregatedLogs$aggregatedLogs$/retention/testFolders/2012/05/08/07$DELETE$0000042-120506235551389-oozie-oozi-W$0$2012-05-06-20-17$2012-05-06-20-17

The JMS messages are automatically purged after a certain period (default 3 days) by the Ivory JMS house-keeping service.

---++ Ivory EL Expressions
