/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hortonworks.beacon.api.plugin.src;

import com.hortonworks.beacon.api.plugin.ReplEventInfo;
import com.hortonworks.beacon.api.plugin.ReplMetaMessage;
import com.hortonworks.beacon.api.plugin.StatusReporter;
import com.hortonworks.beacon.api.plugin.repltarget.BeaconInfo;
import com.hortonworks.beacon.api.plugin.repltarget.PluginInfo;
import com.hortonworks.beacon.api.plugin.repltarget.ReplTarget;
import com.hortonworks.beacon.client.entity.ReplicationPolicy;
import com.hortonworks.beacon.exceptions.BeaconException;

/**
 * A plugin for the source side of replication.  This plugin will run in the beacon instance and
 * be invoked by beacon based on user requests.
 */
public abstract class ReplSource {

    /**
     * This method will be called when a plugin is found by the system and initiated.  It needs to
     * return the message type that this plugin corresponds to.
     * @param info information about the Beacon service, such as the thread pool to use
     * @return Information about this plugin, including what types of messages it handles and the
     * class(es) to use to deserialize them.
     */
    public abstract PluginInfo register(BeaconInfo info);

    /**
     * Initiate a bootstrap operation.  The plugin is expected to perform all of the operations
     * to bootstrap a new policy for its particular type.  This will be called after
     * {@link ReplTarget#boostrap(ReplicationPolicy, ReplEventInfo, StatusReporter)} has been
     * called and returned successfully.
     * @param policy to setup with initial snapshot
     * @param eventInfo information relevant to all messages generated by this event
     * @param fromTarget any information the target returned when bootstrap was called there
     * @param status StatusReporter to use to pass back status info to requester
     * @throws BeaconException if something goes wrong
     */
    public abstract void boostrap(ReplicationPolicy policy, ReplEventInfo eventInfo,
                                  ReplMetaMessage fromTarget, StatusReporter status)
        throws BeaconException;

    /**
     * Repair replication that was broken.  This will only be called if the system has determined
     * that events were lost at the source.  This will be called
     * @param policy that needs repaired
     * @param eventInfo information relevant to all messages generated by this event
     * @param fromTarget any information the target returned when repair was called there
     * @param status StatusReporter to use to pass back status info to requester
     * @throws BeaconException if something goes wrong
     */
    public abstract void repair(ReplicationPolicy policy, ReplEventInfo eventInfo,
                                ReplMetaMessage fromTarget, StatusReporter status)
        throws BeaconException;

    /**
     * Begin failback of a policy.  This method will be called here before being called on the
     * target.  The source is not expected to fetch back the data.  This call is made rather so
     * that the source can do an necessary preparatory work.
     * @param policy to failback
     * @param eventInfo information relevant to all messages generated by this event
     * @param status StatusReporter to use to pass back status info to requester
     * @return any information that the source wishes to pass to the plugin on the target.  This
     * can be left null.
     * @throws BeaconException if something goes wrong
     */
    public abstract ReplMetaMessage initiateFailback(ReplicationPolicy policy,
                                                     ReplEventInfo eventInfo,
                                                     StatusReporter status) throws BeaconException;

    /**
     * Complete failback of a policy.  This expects that the target system has been quiesced and
     * the queue is empty (thus the target and source should now be in sync).  It then switches
     * the target back to read only, the source to read/write, and begins replication moving back
     * from source to target.  This will be called first on the target and then on the source.
     * @param policy to complete failback for
     * @param eventInfo information relevant to all messages generated by this event
     * @param fromTarget any information the target returned when completeFailback was called there
     * @param status StatusReporter to use to pass back status info to requester
     * @return any information that the target wishes to pass to the plugin on the source.  This
     * can be left null.
     * @throws BeaconException
     */
    public abstract void completeFailback(ReplicationPolicy policy, ReplEventInfo eventInfo,
                                          ReplMetaMessage fromTarget, StatusReporter status)
        throws BeaconException;

}
