/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hortonworks.beacon.scheduler.quartz;

import com.hortonworks.beacon.job.JobContext;
import com.hortonworks.beacon.log.BeaconLog;
import com.hortonworks.beacon.rb.MessageCode;

import org.quartz.JobExecutionContext;
import org.quartz.JobKey;
import org.quartz.SchedulerException;

import java.util.List;

/**
 * Provides functionality for identifying parallel executing instance and record them as ignored instance.
 */
final class ParallelExecution {

    private static final BeaconLog LOG = BeaconLog.getLog(ParallelExecution.class);

    private ParallelExecution() {
    }

    static boolean checkParallelExecution(JobExecutionContext context) {
        // TODO check and prevent parallel execution execution of the job instance.
        // there is two cases:
        // 1. (covered) previous instance is still running and next instance triggered. (scheduler based, not store)
        // 2. (covered) After restart, previous instance is still in running state (store) but no actual jobs are
        // running.

        JobKey currentJob = context.getJobDetail().getKey();
        boolean parallel = isParallel(context);
        if (parallel) {
            List<JobExecutionContext> currentlyExecutingJobs;
            try {
                currentlyExecutingJobs = context.getScheduler().getCurrentlyExecutingJobs();
            } catch (SchedulerException e) {
                LOG.error(e.getMessage(), e);
                throw new RuntimeException(e);
            }
            // This is for finding the parallel instance in execution and recording it.
            for (JobExecutionContext jobExecutionContext : currentlyExecutingJobs) {
                JobKey key = jobExecutionContext.getJobDetail().getKey();
                // The name for the two jobs will be same (policyId) and trigger key should be different.
                // The Trigger keys are auto generated by the scheduler while scheduling in the chaining.
                if (key.getName().equals(currentJob.getName())
                        && !jobExecutionContext.getTrigger().equals(context.getTrigger())) {
                    JobContext jobContext = getJobContext(jobExecutionContext);
                    LOG.warn(MessageCode.SCHD_000032.name(),
                            jobContext.getJobInstanceId());
                    context.getJobDetail().getJobDataMap().put(QuartzDataMapEnum.PARALLEL_INSTANCE.getValue(),
                            jobContext.getJobInstanceId());
                }
            }
        }
        return parallel;
    }

    // Parallel flag is set in the Trigger listener.
    private static boolean isParallel(JobExecutionContext context) {
        return context.getJobDetail().getJobDataMap().getBoolean(QuartzDataMapEnum.IS_PARALLEL.getValue());
    }

    private static JobContext getJobContext(JobExecutionContext context) {
        return (JobContext) context.getJobDetail().getJobDataMap().get(QuartzDataMapEnum.JOB_CONTEXT.getValue());
    }
}
